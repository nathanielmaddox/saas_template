// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextSearch", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("PRISMA_DATABASE_URL")
}

// ==========================================
// Core User Management
// ==========================================

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  emailVerified   Boolean   @default(false)
  name            String?
  avatar          String?
  role            Role      @default(USER)
  status          UserStatus @default(PENDING)
  passwordHash    String?   @map("password_hash")
  phoneNumber     String?   @map("phone_number")
  phoneVerified   Boolean   @default(false) @map("phone_verified")

  // Metadata
  metadata        Json?
  lastLoginAt     DateTime? @map("last_login_at")
  lastLoginIp     String?   @map("last_login_ip")

  // Timestamps
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  // Relations
  accounts        Account[]
  sessions        Session[]
  subscriptions   Subscription[]
  organizations   OrganizationMember[]
  projects        Project[]
  activities      ActivityLog[]
  apiKeys         ApiKey[]
  notifications   Notification[]
  preferences     UserPreference?

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
  DEVELOPER
  SUPPORT
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DELETED
}

// ==========================================
// Authentication & Sessions
// ==========================================

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
  @@map("verification_tokens")
}

// ==========================================
// Subscription & Billing
// ==========================================

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @map("user_id")
  stripeCustomerId     String?            @unique @map("stripe_customer_id")
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id")
  stripePriceId        String?            @map("stripe_price_id")

  plan                 String             @default("free")
  status               SubscriptionStatus @default(TRIALING)
  quantity             Int                @default(1)

  trialStart           DateTime?          @map("trial_start")
  trialEnd             DateTime?          @map("trial_end")
  currentPeriodStart   DateTime           @map("current_period_start")
  currentPeriodEnd     DateTime           @map("current_period_end")
  cancelAtPeriodEnd    Boolean            @default(false) @map("cancel_at_period_end")
  canceledAt           DateTime?          @map("canceled_at")
  endedAt              DateTime?          @map("ended_at")

  metadata             Json?

  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")

  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices             Invoice[]
  usageRecords         UsageRecord[]

  @@index([userId])
  @@index([status])
  @@index([plan])
  @@map("subscriptions")
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  UNPAID
  PAUSED
}

model Invoice {
  id                   String    @id @default(cuid())
  subscriptionId       String    @map("subscription_id")
  stripeInvoiceId      String?   @unique @map("stripe_invoice_id")

  amountPaid           Int       @map("amount_paid")
  amountDue            Int       @map("amount_due")
  currency             String    @default("usd")
  status               String

  billingReason        String?   @map("billing_reason")
  description          String?

  periodStart          DateTime  @map("period_start")
  periodEnd            DateTime  @map("period_end")

  paidAt               DateTime? @map("paid_at")
  dueDate              DateTime? @map("due_date")

  createdAt            DateTime  @default(now()) @map("created_at")

  subscription         Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([status])
  @@map("invoices")
}

// ==========================================
// Organizations & Teams
// ==========================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?

  metadata    Json?
  settings    Json?

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  members     OrganizationMember[]
  projects    Project[]
  invitations OrganizationInvitation[]

  @@index([slug])
  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  role           String       @default("member")
  permissions    Json?

  joinedAt       DateTime     @default(now()) @map("joined_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([organizationId])
  @@map("organization_members")
}

model OrganizationInvitation {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  email          String
  role           String       @default("member")
  token          String       @unique

  expiresAt      DateTime     @map("expires_at")
  acceptedAt     DateTime?    @map("accepted_at")

  createdAt      DateTime     @default(now()) @map("created_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([organizationId])
  @@map("organization_invitations")
}

// ==========================================
// Projects & Resources
// ==========================================

model Project {
  id             String        @id @default(cuid())
  name           String
  slug           String
  description    String?
  userId         String        @map("user_id")
  organizationId String?       @map("organization_id")

  status         ProjectStatus @default(ACTIVE)
  visibility     String        @default("private")

  settings       Json?
  metadata       Json?

  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  resources      Resource[]

  @@unique([organizationId, slug])
  @@index([userId])
  @@index([organizationId])
  @@index([status])
  @@map("projects")
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

model Resource {
  id          String   @id @default(cuid())
  projectId   String   @map("project_id")
  type        String
  name        String
  data        Json

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([type])
  @@map("resources")
}

// ==========================================
// Activity & Audit Logs
// ==========================================

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  action      String
  entityType  String   @map("entity_type")
  entityId    String   @map("entity_id")

  metadata    Json?
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")

  createdAt   DateTime @default(now()) @map("created_at")

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
  @@index([createdAt])
  @@map("activity_logs")
}

// ==========================================
// API Keys & Webhooks
// ==========================================

model ApiKey {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  name        String
  key         String    @unique
  secret      String

  permissions Json?
  rateLimit   Int?      @default(1000) @map("rate_limit")

  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
  @@map("api_keys")
}

model Webhook {
  id          String   @id @default(cuid())
  url         String
  events      String[]
  secret      String

  active      Boolean  @default(true)
  metadata    Json?

  lastError   String?  @map("last_error")
  lastErrorAt DateTime? @map("last_error_at")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([active])
  @@map("webhooks")
}

// ==========================================
// Notifications & Preferences
// ==========================================

model Notification {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  type        String
  title       String
  content     String?

  read        Boolean  @default(false)
  readAt      DateTime? @map("read_at")

  metadata    Json?

  createdAt   DateTime @default(now()) @map("created_at")

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([type])
  @@index([createdAt])
  @@map("notifications")
}

model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique @map("user_id")

  emailNotifications Boolean @default(true) @map("email_notifications")
  pushNotifications  Boolean @default(true) @map("push_notifications")
  smsNotifications   Boolean @default(false) @map("sms_notifications")

  theme             String   @default("light")
  language          String   @default("en")
  timezone          String   @default("UTC")

  settings          Json?

  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// ==========================================
// Usage Tracking
// ==========================================

model UsageRecord {
  id             String       @id @default(cuid())
  subscriptionId String       @map("subscription_id")
  metric         String
  quantity       Int

  timestamp      DateTime     @default(now())
  metadata       Json?

  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([metric])
  @@index([timestamp])
  @@map("usage_records")
}